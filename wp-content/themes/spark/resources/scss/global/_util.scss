//
// Component:       Utilities
// Description:     Utility Mixins and Functions
//
// ========================================================================


// Utility Functions
// ========================================================================

/**
 * Calculates remaining viewport margin outside the grid
 *
 * @param property string The CSS property to modify
 * @param modifier value  A CSS unit of measurement (optional)
 */

@mixin viewportMargin($property: left, $modifier: 0px) {
  #{$property}: calc(((100vw - #{$container-max-width}) / 2) + (#{$modifier}));
}


/**
 * Calculates remaining viewport margin outside the grid
 * and applies a negative value to it
 *
 * @param property string The CSS property to modify
 * @param modifier value  A CSS unit of measurement (optional)
 */

@mixin negativeViewportMargin($property: left, $modifier: 0px) {
  #{$property}: calc(((100vw - #{$container-max-width}) / -2) - (#{$modifier}));
}


/**
 * Calculates remaining viewport margin outside the grid
 * also adding in the width of the specified columns
 *
 * @param property string  The CSS property to modify
 * @param columns  integer The number of columns in the grid
 */

@mixin dynamicGridWidth($property: width, $columns: 1) {
  @include viewportMargin($property, #{$container-max-width} * (#{$columns} / 12))
}


/*
*  Removes the unit (e.g. px, em, rem) from a value, returning the number only.
*
*  @param {Number} $num - Number to strip unit from.
*
*  @returns {Number} The same number, sans unit.
*/

@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

/*
*  Converts a pixel value to matching rem value.
*
*  *Any* value passed, regardless of unit, is assumed to be a pixel value.
*  By default, the base pixel value used to calculate the rem value
*  is taken from the `$global-font-size` variable.
*
*  @access private
*
*  @param {Number} $value - Pixel value to convert.
*  @param {Number} $base [null] - Base for pixel conversion.
*
*  @returns {Number} A number in rems, calculated based on the given
*  value and the base pixel value. rem values are passed through as is.
*/

@function to-rem($value, $base: null) {
  // Check if the value is a number
  @if type-of($value) != 'number' {
    @warn inspect($value) + ' was passed to rem-calc(), which is not a number.';
    @return $value;
  }

  // Transform em into rem if someone hands over 'em's
  @if unit($value) == 'em' {
    $value: strip-unit($value) * 1rem;
  }

  // Calculate rem if units for $value is not rem or em
  @if unit($value) != 'rem' {
    $value: strip-unit($value) / strip-unit($base) * 1rem;
  }

  // Turn 0rem into 0
  @if $value == 0rem {
    $value: 0;
  }

  @return $value;
}

/*
*  Converts one or more pixel values into matching rem values.
*
*  @param {Number|List} $values - One or more values to convert.
*  Be sure to separate them with spaces and not commas.
*  If you need to convert a comma-separated list, wrap the list in parentheses.
*
*  @param {Number} $base [null] - The base value to use when calculating the `rem`.
*  If this parameter is `null`, the function will reference
*  the `$base-font-size` variable as the base.
*
*   @returns {List} A list of converted values.
*/

@function rem-calc($values, $base: null) {
  $rem-values: ();
  $count: length($values);

  // If no base is defined, defer to the global font size
  @if $base == null {
    $base: 16px;
  }

  // If the base font size is a %, then multiply it by 16px
  // This is because 100% font size = 16px in most all browsers
  @if unit($base) == '%' {
    $base: ($base / 100%) * 16px;
  }

  // Using rem as base allows correct scaling
  @if unit($base) == 'rem' {
    $base: strip-unit($base) * 16px;
  }

  @if $count == 1 {
    @return to-rem($values, $base);
  }

  @for $i from 1 through $count {
    $rem-values: append($rem-values, to-rem(nth($values, $i), $base));
  }

  @return $rem-values;
}


////
/// @group responsive-embed
////

/// Calculates the height as a percentage of the width for a given ratio.
/// @param {List} $ratio - Ratio to use to calculate the height, formatted as `x by y`.
/// @return {Number} A percentage value for the height relative to the width of a responsive container.

@function ratio-to-percentage($ratio) {
  $w: nth($ratio, 1);
  $h: nth($ratio, 3);
  @return $h / $w * 100%;
}

/// Margin below a responsive embed container.
/// @type Number

$responsive-embed-margin-bottom: rem-calc(16) !default;

/// Aspect ratios used to determine padding-bottom of responsive embed containers.
/// @type Map

$responsive-embed-ratios: (
  default: 16 by 9,
  standard: 4 by 3,
) !default;

/// Creates a responsive embed container.
/// @param {String|List} $ratio [default] - Ratio of the container. Can be a key from the `$responsive-embed-ratios` map or a list formatted as `x by y`.

@mixin responsive-embed($ratio: default) {
  @if type-of($ratio) == 'string' {
    $ratio: map-get($responsive-embed-ratios, $ratio);
  }
  position: relative;
  height: 0;
  margin-bottom: $responsive-embed-margin-bottom;
  padding-bottom: ratio-to-percentage($ratio);
  overflow: hidden;

  iframe,
  object,
  embed,
  video {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
}

.responsive-embed,
.flex-video {
  @include responsive-embed($ratio: default);

  $ratios: map-remove($responsive-embed-ratios,default);

  @each $name, $ratio in $ratios {
    &.#{$name} {
      padding-bottom: ratio-to-percentage($ratio);
    }
  }
}


// Utility Mixins
// ========================================================================

// Input placeholder color
@mixin placeholders($color) {
  &::-webkit-input-placeholder { color: $color; }
  &:-moz-placeholder { color: $color; opacity: 1; }
  &::-moz-placeholder { color: $color; opacity: 1; }
  &:-ms-input-placeholder { color: $color; }
}

// Responsive text
@mixin responsive-font-size(
  $max-font-size,
  $min-font-size: null,
  $max-vw: $container-max-width,
  $min-vw: $breakpoint-small) {

  // Convert numerals to pixels
  $max-font-size: $max-font-size + 0px;
  $max-vw: $max-vw + 0px;
  $min-vw: $min-vw + 0px;

  // If $min-font-size was passed use it.
  @if ($min-font-size != null) {
    $min-font-size: $min-font-size + 0px;
  } @else {
    $min-font-size: $max-font-size / 2.25;
  }

  font-size: $min-font-size !important;

  @media screen and (min-width: $min-vw) {
    font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)})) !important;
  }

  @media screen and (min-width: $max-vw) {
    font-size: $max-font-size !important;
  }
}


// Xdebug var_dump styling
.xdebug-var-dump {
  z-index: 9;
  width: 100%;
  padding: 1rem;
  background: #111a25;
  color: #a3b8ff;
  white-space: pre-wrap;
  word-wrap: break-word;
  font-size: 12px;
  text-align: left !important;

  i {
    font-size: 12px;
    color: #888a85;
  }

  small {
    color: white;
    font-size: 12px;
  }

  font[color="#cc0000"] {
    color: #93bd76 !important;
  }

  font[color="#4e9a06"] {
    color: #d19a66 !important;
  }
}
